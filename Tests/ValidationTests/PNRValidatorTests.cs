using Application;
using Application.Command;
using Application.Queries;
using Application.Validations.Validators;
using Data.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Xunit;

namespace Tests.ValidationTests
{
    public class PNRValidatorTests
    {
        private PNRValidator _pnrValidator;
        [Fact]
        public void AutoGeneratedPNR_Valid_IsAlphanumericAnd6Characters()
        {
            var pnr = PNRGenerator.Generate();
            _pnrValidator = new PNRValidator(new JsonDataService(), pnr);
            var result = _pnrValidator.Execute();
            var message = _pnrValidator.ErrorMessages.FirstOrDefault();

            Assert.Null(message);
            Assert.True(result);
        }

        [Fact]
        public void AutoGeneratedPNR_NotValid_StartsWithNumber()
        {
            var pnr = "1ND4L3";
            _pnrValidator = new PNRValidator(new JsonDataService(), pnr);
            var result = _pnrValidator.Execute();
            var message = _pnrValidator.ErrorMessages.FirstOrDefault();

            Assert.NotNull(message);
            Assert.False(result);
        }

        [Fact]
        public void AutoGeneratedPNR_NotValid_Not6Characters()
        {
            var pnr = "INDA";
            _pnrValidator = new PNRValidator(new JsonDataService(), pnr);
            var result = _pnrValidator.Execute();
            var message = _pnrValidator.ErrorMessages.FirstOrDefault();

            Assert.NotNull(message);
            Assert.False(result);
        }

        [Fact]
        public void AutoGeneratedPNR_AlreadyExists_NotValid()
        {
            var reservationQuery = new ReservationQuery(new JsonDataService());
            var reservations = reservationQuery.GetReservations();
            var existingPNR = reservations.FirstOrDefault().PNR;

            _pnrValidator = new PNRValidator(new JsonDataService(), existingPNR);
            var result = _pnrValidator.Execute();
            var message = _pnrValidator.ErrorMessages.FirstOrDefault();

            Assert.NotNull(message);
            Assert.False(result);
        }
    }
}
